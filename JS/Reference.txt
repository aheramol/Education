#Javscript Introduction
    1) It is lightweight, interpreted,compiled client side(Browser) scripting langauge.
    2) It is cross-platform, prototype-based, multi-paradigm scripting language.
    3) It is single-threaded, loosely-typed, dynamic,high level scripting langauge.
    4) It's supports functional, object-oriented, imperative and declerative style.
    5) It's controlling web page behavior.
    6) Developed by "Brendan Eich" at Netscape.
    7) Full integration with HTML and CSS.
#Popular Javscript Engines
    1) Chrome's and Opera - V8 Engine.
    2) Firefox - SpiderMonkey.
    3) Safari - JavascriptCore i.e. SquirrelFish*[Extreme].
    4) Edge's - Chakra.
#Javscript Framework's and Libraries
    1) React, Vue, Angular, Ember, Backbone.
    2) jQuery, Glimmer, Popper,D3,Google Polymer.
#Javscript Extension
    1) save file with ".js" extension.
#-------------------------------------------------------------------------------#
#JS Data Types
    1) Primitives Data Types
        1.1) Undefined
        1.2) Boolean
        1.3) Number
        1.4) String
        1.5) BigInt
        1.6) Symbol
    2)structural Data Types
        2.1) Object
        2.2) Arrays
        2.3) Map 
        2.4) Set 
        2.5) Date
#------------------------------------------------------------------------------#
#JS Keywords
1) void     13) enum    25) break       37) protected   49) catch   61) argument
2) null     14) typeof  26) continue    38) instanceof  50) throw   62) synchronized
3) boolean  15) eval    27) default     39) this        51) throws  63) transient
4) true     16) var     28) for         40) function    52) import
5) false    17) let     29) in          41) return      53) export
6) byte     18) const   30) goto        42) super       54) finally
7) short    19) if      31) class       43) extends     55) package
8) char     20) else    32) final       44) implements  56) volatile
9) int      21) do      33) static      45) interface   57) native
10) float   22) while   34) abstract    46) new         58) with
11) long    23) switch  35) public      47) delete      59) yield
12) double  24) case    36) private     48) try         60) debugger
#-------------------------------------------------------------------------------#
#JS Identifiers and Rules
An identifier is a sequence of characters in the code that identifies a variable, 
function, or property.

1) Identifier are case-sensitive.
2) variable must begin|start with a alphabets[a-z|A-Z], dollar sing[$] OR underscore[_].
3) variable can contain aplha-numeric[a-z|A-Z|0-9], underscore[_] and dollar sign[$].
4) variable can not contain Keywords.
5) variable can not contain whitespaces.
6) variable can not contain special symbol.
7) Math operations rule-> Multiplication | Division | Addition | Subtraction.
8) Prefered to use Snake_case,camelCase OR PascalCase.
#-------------------------------------------------------------------------------#
#JS operators
Arithmetic operators[+,-,*,/,%,++,--,**].
Comparison operators[==,!=,===,!==,>,>=,<,<=].
Bitwise operators[&,|,~,^,<<,>>,>>>].
Logical operators[&&,||,!]
Assignment operators[=,+=,-=,*=,/=,%=,**=, <<=,>>=,&=,|=,^=,&&=,||=,??=].
Ternary operator(Conditional)[condition ? val1 : val2].
Others operator[typeof,delete,in,instanceof,void,new,this].
#-------------------------------------------------------------------------------#
#JS Literals
JavaScript Literals are the fixed value that cannot be changed, you do not need to 
specify any type of keyword to write literals.

1) Numeric Literals
    1.1) Decimal[Base 10] are define as normal integer.-->{[0-9]}.
    1.2) Octal[Base 8] are define a leading zero[0]-->{0[1-7]}.
    1.3) Hexadecimal[0-9,A-F] are defined a leading zero+x[0x].-->{0x[0-9,A-F]}.
2) String Literal
    2.1) String will be declare double OR single quote.{"string", 'string'}.
    2.2) String will be concatenated with unary plus sign(+). 
3) Template literal
    3.1) Used to backsticks {`string`}.
4) Array Literal
    4.1) Array define with square bracket{["A","B","c"]}.
5) Object Literal
    5.1) Object is define to Curly Braces with key and value pairs.[{"Key" : "value"}].   
#-------------------------------------------------------------------------------#
#JS Comments
1) Single line (//).
2) Multiline (/*....*/).
#-------------------------------------------------------------------------------#
#JS Errors Types
The 7 types of native erros in JS.
1) EvalError
    Creates an instance representing an error that occurs regarding the global function eval().
2) RangeError
    Creates an instance representing an error that occurs when a numeric variable
    or parameter is outside of its valid range.
3) ReferenceError
    Creates an instance representing an error that occurs when de-referencing an invalid reference.
4) SyntaxError
    Creates an instance representing a syntax error.
5) TypeError
    Creates an instance representing an error that occurs when a variable or parameter 
    is not of a valid type.
6) URIError
    Creates an instance representing an error that occurs when encodeURI() or 
    decodeURI() are passed invalid parameters.
7) AggregateError
    Creates an instance representing several errors wrapped in a single error when 
    multiple errors need to be reported by an operation, for example by Promise.any().
#-------------------------------------------------------------------------------#
#JS Decision Making Statement
A) Conditional Making

1) if(condition){
        //code to run if condition is true
    }
#---------------------------------------
2) if(condition){
        //code to run if condition is true;
    }else{
        //code to run if condition is false;
    }
#---------------------------------------
3) if(condition){
        //code to run if condition is true;
        if(condition){
            //code to run if condition is true;
            if(condition){
                //code to run if condition is true;
            }
        }
    }
#---------------------------------------
4) if(condition){
    //code to run if condition is true;
    }else if(condition){
        //code to run if condition is true;
    }else if(condition){
        //code to run if condition is true;
    }else{
        //code to run if condition is false;
    }
#---------------------------------------
5) swich(expression)
    //Expression must have Number or string;
    {
        case choice1 : //code to run if condition is true;
        break;

        case choice2 : //code to run if condition is true;
        break;
            .
            .
            .
        case choiceN : //code to run if condition is true;
        break;

        default : //code to run if condition is false;
    }
#---------------------------------------
6) Ternary operator
condition ? //Statement to run if condition is true; : //Statement to run if condition is false;
#---------------------------------------
B) Loops Making

1) for(initialization; condition; expression[increment/decrement])
{
    // code to run
}
#---------------------------------------
2) Initializer; 
while(condition)
{
    // code to run
    //final-expression[increment/decrement]
}
#---------------------------------------
3) Initializer;
do{
    // code to run
    // final-expression[increment/decrement]
}while(condition)
#---------------------------------------
4)
4.1) Object properties 
for(KeyName in object)
{
    //code to be executed;
}
4.2) Array properties
for(variablename in array)
{
    //code to be executed;
}
#---------------------------------------
5)
5.1) Object properties 
for(keyName of object)
{
    //code to be executed;
}

5.2) Array properties
for(variablename of array)
{
    //code to be executed;
}
#-------------------------------------------------------------------------------#
